"""
==> @ Crreated by J.M. Abril-HernÃ¡ndez, 2025.

This code reads the output files generated by TERESA_map.py: 'Absolute_min.txt' and 'Mapa4D.txt'.

- From the absolute minimum of X_gl, it estimates the D_Chi_1_sigma interval corresponding to a 
  68.3% confidence level (equivalent to 1-sigma), allowing optimization of the four model parameters.
  (see G. Cowan, 1998: Statistical Data Analysis)
- This interval is divided into three equal parts, defining three threshold levels of X_gl.
- The code reads 'Mapa4D.txt' and selects solvers with X_gl values within each threshold group,
  storing them in three files: 'Cloud1.txt', 'Cloud2.txt', and 'Cloud3.txt'.
  These three files together represent the 1-sigma confidence region.

Note: For complex X-hypersurfaces, multiple relative minima may exist around the absolute minimum.
This method samples solvers from the entire domain that fall within the threshold values.

The three output files can be used by TERESA_plots.py to visualize solution clouds or study
the topology of attractors.

You can inspect the extreme parameter values in the third cloud to verify they lie within the domain.
If not, revisit TERESA_map.py to redefine the boundaries.

==> If you keep the default names for the input and output files, you can run this code without any further action. 

"""
import sys

with open('Absolute_min.txt', 'r') as file:
    for line in file:    
        # Ignoring empty lines
        if line.strip():
            parts = line.strip().split()
            minA = float(parts[0])  
            minw= float(parts[1]) 
            minsa= float(parts[2])
            minsw= float(parts[3])
            minChi= float(parts[4])
            N = int(parts[5])
            break
# Only the first line is read since it contains all the necessary data for this code.

D_Chi_1_sigma = (minChi**2 + 4.72/(N-4))**(0.5) - minChi  # This is the interval for 68.3% confidence 
minChi1 = minChi + 1./3. * D_Chi_1_sigma # The interval is divided into three equal parts, defining three threshold levels
minChi2 = minChi + 2./3. * D_Chi_1_sigma
minChi3 = minChi + D_Chi_1_sigma
print(f"Threshold levels minChi1 = {minChi1:.3f}\n")
print(f"minChi2 = {minChi2:.3f}\n")
print(f"minChi3 = {minChi3:.3f}\n")

count1 = count2 = count3 = count4 = 0

with open('Cloud1.txt', 'w', encoding= 'utf-8') as file1:
    with open('Cloud2.txt', 'w', encoding= 'utf-8') as file2:
        with open('Cloud3.txt', 'w', encoding= 'utf-8') as file3:

            with open('Mapa4D.txt', 'r') as file0:
                for line in file0:
                    if line.strip():
                        parts = line.strip().split()
                        if len(parts) != 5:
                            print("Failure != 5\n")
                            break 
                        # Only X-gl is relevant here
                        vChi= float(parts[4])
                        if vChi <= minChi1:
                            file1.write(line)
                            count1 += 1
                        elif vChi <= minChi2:
                            file2.write(line)
                            count2 += 1 
                        elif vChi <= minChi3:
                            file3.write(line)
                            count3 += 1
                        else:
                            count4 +=1
                            #no hago nada
print(f"Counts per threshold level  (1) {count1} , (2) {count2}, (3) {count3}, (4) {count4} \n")
suma = count1 + count2 + count3 + count4
print(f"Total solvers processed {suma}\n")
sys.exit()